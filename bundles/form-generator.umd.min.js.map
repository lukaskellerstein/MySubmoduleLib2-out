{"version":3,"sources":["ng://form-generator/lib/dynamic-form/dynamic-form.component.ts","ng://form-generator/lib/dynamic-field/widgets/object-link/object-link.component.ts","ng://form-generator/lib/dynamic-field/widgets/my-button/my-button.component.ts","ng://form-generator/lib/dynamic-field/widgets/my-input/my-input.component.ts","ng://form-generator/lib/dynamic-field/widgets/my-select/my-select.component.ts","ng://form-generator/lib/dynamic-field/dynamic-field.directive.ts","ng://form-generator/lib/dynamic-field/widgets/widgets.module.ts","ng://form-generator/lib/form-generator.module.ts"],"names":["DynamicFormComponent","fb","this","EventEmitter","Object","defineProperty","prototype","config","filter","_a","type","form","valueChanges","valid","value","ngOnInit","createGroup","ngOnChanges","_this","controls_1","keys","controls","configControls_1","map","item","name","control","includes","forEach","removeControl","find","addControl","createControl","group","disabled","validation","handleSubmit","event","preventDefault","stopPropagation","submit","emit","setDisabled","disable","method","setValue","emitEvent","Component","args","selector","exportAs","template","styles","FormBuilder","Input","Output","ObjectLinkComponent","onLinkClick","ev","MyButtonComponent","MyInputComponent","MySelectComponent","components","button","input","select","object","DynamicFieldDirective","resolver","container","component","instance","supportedTypes","join","Error","resolveComponentFactory","createComponent","buildFieldConfig","label","Directive","ComponentFactoryResolver","ViewContainerRef","WidgetsModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports","entryComponents","FormGeneratorModule"],"mappings":"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","sourcesContent":["import { Component, OnInit, OnChanges, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\n\nimport { Observable } from 'rxjs';\nimport { FieldConfig } from '../dynamic-field/widgets/base/field.config';\n\n@Component({\n  selector: 'lib-dynamic-form',\n  exportAs: 'dynamicForm',\n  template: `<form class=\"dynamic-form\" [formGroup]=\"form\" (submit)=\"handleSubmit($event)\">\n  <ng-container *ngFor=\"let field of config | keyvalue;\">\n    {{ field | json }}\n    <ng-container dynamicField [config]=\"field.value\" [name]=\"field.key\" [group]=\"form\">\n    </ng-container>\n  </ng-container>\n  <input *ngIf=\"true\" type=\"submit\" name=\"submit\" value=\"Submit\"> \n</form>`,\n  styles: [``]\n})\nexport class DynamicFormComponent implements OnChanges, OnInit {\n  @Input()\n  config: FieldConfig[] = [];\n\n  @Output()\n  submit: EventEmitter<any> = new EventEmitter<any>();\n\n  form: FormGroup;\n\n  get controls() { return this.config.filter(({type}) => type !== 'button'); }\n  get changes(): Observable<any> { return this.form.valueChanges; }\n  get valid() { return this.form.valid; }\n  get value(): any { return this.form.value; }\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.createGroup();\n  }\n\n  ngOnChanges() {\n    if (this.form) {\n      const controls = Object.keys(this.form.controls);\n      const configControls = this.controls.map((item) => item.name);\n\n      controls\n        .filter((control) => !configControls.includes(control))\n        .forEach((control) => this.form.removeControl(control));\n\n      configControls\n        .filter((control) => !controls.includes(control))\n        .forEach((name) => {\n          const config = this.config.find((control) => control.name === name);\n          this.form.addControl(name, this.createControl(config));\n        });\n\n    }\n  }\n\n  createGroup() {\n    const group = this.fb.group({});\n    this.controls.forEach(control => group.addControl(control.name, this.createControl(control)));\n    return group;\n  }\n\n  createControl(config: FieldConfig): FormControl {\n    const { disabled, validation, value } = config;\n    return this.fb.control({ disabled, value }, validation);\n  }\n\n  handleSubmit(event: Event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.submit.emit(this.value);\n  }\n\n  setDisabled(name: string, disable: boolean) {\n    if (this.form.controls[name]) {\n      const method = disable ? 'disable': 'enable';\n      this.form.controls[name][method]();\n      return;\n    }\n\n    this.config = this.config.map((item) => {\n      if (item.name === name) {\n        item.disabled = disable;\n      }\n      return item;\n    });\n  }\n\n  setValue(name: string, value: any) {\n    this.form.controls[name].setValue(value, {emitEvent: true});\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FieldConfig } from '../base/field.config';\nimport { FormGroup } from '@angular/forms';\nimport { Field } from '../base/field';\n\n@Component({\n  selector: 'lib-object-link',\n  template: `<a href=\"#\" (click)=\"onLinkClick($event)\">{{ config.name }}</a>`\n})\nexport class ObjectLinkComponent implements Field  {\n\n  config: FieldConfig;\n  group: FormGroup;\n\n  onLinkClick(ev){\n    // TODO: trigger event to add new form to forms container \n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Field } from '../base/field';\nimport { FieldConfig } from '../base/field.config';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'lib-my-button',\n  template: `<div class=\"dynamic-field form-button\" [formGroup]=\"group\">\n  <button [disabled]=\"config.disabled\" type=\"submit\">\n    {{ config.label }}\n  </button>\n</div>`,\n  styles: [``]\n})\nexport class MyButtonComponent implements Field {\n  config: FieldConfig;\n  group: FormGroup;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FieldConfig } from '../base/field.config';\nimport { FormGroup } from '@angular/forms';\nimport { Field } from '../base/field';\n\n@Component({\n  selector: 'lib-my-input',\n  template: `<div class=\"dynamic-field form-input\" [formGroup]=\"group\">\n  <label>{{ config.label }}</label>\n  <input type=\"text\" [attr.placeholder]=\"config.placeholder\" [formControlName]=\"config.name\">\n</div>`,\n  styles: [``]\n})\nexport class MyInputComponent implements Field  {\n\n  config: FieldConfig;\n  group: FormGroup;\n\n  \n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Field } from '../base/field';\nimport { FieldConfig } from '../base/field.config';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'lib-my-select',\n  template: `<div class=\"dynamic-field form-select\" [formGroup]=\"group\">\n  <label>{{ config.label }}</label>\n  <select [formControlName]=\"config.name\">\n    <option value=\"\">{{ config.placeholder }}</option>\n    <option *ngFor=\"let option of config.options\">\n      {{ option }}\n    </option>\n  </select>\n</div>`,\n  styles: [``]\n})\nexport class MySelectComponent implements Field {\n\n  config: FieldConfig;\n  group: FormGroup;\n\n}\n","import { ComponentFactoryResolver, ComponentRef, Directive, Input, OnChanges, OnInit, Type, ViewContainerRef } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { ObjectLinkComponent } from './widgets/object-link/object-link.component';\nimport { Field } from './widgets/base/field';\nimport { MyButtonComponent } from './widgets/my-button/my-button.component';\nimport { MyInputComponent } from './widgets/my-input/my-input.component';\nimport { MySelectComponent } from './widgets/my-select/my-select.component';\nimport { FieldConfig } from './widgets/base/field.config';\n\nconst components: { [type: string]: Type<Field> } = {\n  button: MyButtonComponent,\n  input: MyInputComponent,\n  select: MySelectComponent,\n  object: ObjectLinkComponent\n};\n\n@Directive({\n  selector: '[dynamicField]'\n})\nexport class DynamicFieldDirective implements Field, OnChanges, OnInit {\n  @Input()\n  config: FieldConfig;\n\n  @Input()\n  name: string;\n\n  @Input()\n  group: FormGroup;\n\n  component: ComponentRef<Field>;\n\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private container: ViewContainerRef\n  ) { }\n\n  ngOnChanges() {\n    if (this.component) {\n      this.component.instance.config = this.config;\n      this.component.instance.group = this.group;\n    }\n  }\n\n  ngOnInit() {\n    if (!components[this.config.type]) {\n      const supportedTypes = Object.keys(components).join(', ');\n      throw new Error(\n        `Trying to use an unsupported type (${this.config.type}).\n        Supported types: ${supportedTypes}`\n      );\n    }\n    const component = this.resolver.resolveComponentFactory<Field>(components[this.config.type]);\n    this.component = this.container.createComponent(component);\n    this.component.instance.config = this.buildFieldConfig(this.config)\n    this.component.instance.group = this.group;\n  }\n\n  buildFieldConfig(config) {\n    if (!config.name) {\n      config.name = this.name;\n\n      if (!config.label) {\n        config.label = this.name;\n      }\n      // TODO further field config prerender changes\n      return config;\n\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MyInputComponent } from './my-input/my-input.component';\nimport { MyButtonComponent } from './my-button/my-button.component';\nimport { MySelectComponent } from './my-select/my-select.component';\nimport { ObjectLinkComponent } from './object-link/object-link.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [MyInputComponent, MyButtonComponent, MySelectComponent, ObjectLinkComponent],\n  exports: [MyInputComponent, MyButtonComponent, MySelectComponent, ObjectLinkComponent],\n  entryComponents: [MyButtonComponent, MyInputComponent, MySelectComponent, ObjectLinkComponent]\n})\nexport class WidgetsModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DynamicFormComponent } from './dynamic-form/dynamic-form.component';\nimport { DynamicFieldDirective } from './dynamic-field/dynamic-field.directive';\nimport { WidgetsModule } from './dynamic-field/widgets/widgets.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    WidgetsModule\n  ],\n  declarations: [DynamicFormComponent, DynamicFieldDirective],\n  exports: [DynamicFormComponent, DynamicFieldDirective]\n})\nexport class FormGeneratorModule { }\n"]}