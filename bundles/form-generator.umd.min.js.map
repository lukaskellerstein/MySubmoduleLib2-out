{"version":3,"sources":["ng://form-generator/lib/dynamic-form/dynamic-form.component.ts","ng://form-generator/lib/dynamic-field/dynamic-field.directive.ts","ng://form-generator/lib/form-generator.module.ts"],"names":["DynamicFormComponent","fb","this","EventEmitter","Object","defineProperty","prototype","config","filter","_a","type","form","valueChanges","valid","value","ngOnInit","createGroup","ngOnChanges","_this","controls_1","keys","controls","configControls_1","map","item","name","control","includes","forEach","removeControl","find","addControl","createControl","group","disabled","validation","handleSubmit","event","preventDefault","stopPropagation","submit","emit","setDisabled","disable","method","setValue","emitEvent","Component","args","selector","template","styles","FormBuilder","Input","Output","components","button","MyButtonComponent","input","MyInputComponent","select","MySelectComponent","DynamicFieldDirective","resolver","container","component","instance","supportedTypes","join","Error","resolveComponentFactory","createComponent","Directive","ComponentFactoryResolver","ViewContainerRef","FormGeneratorModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","UiComponentsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit, OnChanges, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\n\nimport { FieldConfig} from 'MySubmoduleLib1';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'lib-dynamic-form',\n  template: `<form class=\"dynamic-form\" [formGroup]=\"form\" (submit)=\"handleSubmit($event)\">\n  <ng-container *ngFor=\"let field of config;\" dynamicField [config]=\"field\" [group]=\"form\">\n  </ng-container>\n</form>`,\n  styles: [``]\n})\nexport class DynamicFormComponent implements OnChanges, OnInit {\n  @Input()\n  config: FieldConfig[] = [];\n\n  @Output()\n  submit: EventEmitter<any> = new EventEmitter<any>();\n\n  form: FormGroup;\n\n  get controls() { return this.config.filter(({type}) => type !== 'button'); }\n  get changes(): Observable<any> { return this.form.valueChanges; }\n  get valid() { return this.form.valid; }\n  get value(): any { return this.form.value; }\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.createGroup();\n  }\n\n  ngOnChanges() {\n    if (this.form) {\n      const controls = Object.keys(this.form.controls);\n      const configControls = this.controls.map((item) => item.name);\n\n      controls\n        .filter((control) => !configControls.includes(control))\n        .forEach((control) => this.form.removeControl(control));\n\n      configControls\n        .filter((control) => !controls.includes(control))\n        .forEach((name) => {\n          const config = this.config.find((control) => control.name === name);\n          this.form.addControl(name, this.createControl(config));\n        });\n\n    }\n  }\n\n  createGroup() {\n    const group = this.fb.group({});\n    this.controls.forEach(control => group.addControl(control.name, this.createControl(control)));\n    return group;\n  }\n\n  createControl(config: FieldConfig): FormControl {\n    const { disabled, validation, value } = config;\n    return this.fb.control({ disabled, value }, validation);\n  }\n\n  handleSubmit(event: Event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.submit.emit(this.value);\n  }\n\n  setDisabled(name: string, disable: boolean) {\n    if (this.form.controls[name]) {\n      const method = disable ? 'disable': 'enable';\n      this.form.controls[name][method]();\n      return;\n    }\n\n    this.config = this.config.map((item) => {\n      if (item.name === name) {\n        item.disabled = disable;\n      }\n      return item;\n    });\n  }\n\n  setValue(name: string, value: any) {\n    this.form.controls[name].setValue(value, {emitEvent: true});\n  }\n}\n","import { ComponentFactoryResolver, ComponentRef, Directive, Input, OnChanges, OnInit, Type, ViewContainerRef } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport {MyButtonComponent, MyInputComponent, MySelectComponent, Field, FieldConfig} from 'MySubmoduleLib1';\n\nconst components: {[type: string]: Type<Field>} = {\n  button:  MyButtonComponent,\n  input: MyInputComponent,\n  select: MySelectComponent\n};\n\n@Directive({\n  selector: '[dynamicField]'\n})\nexport class DynamicFieldDirective implements Field, OnChanges, OnInit {\n  @Input()\n  config: FieldConfig;\n\n  @Input()\n  group: FormGroup;\n\n  component: ComponentRef<Field>;\n\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private container: ViewContainerRef\n  ) {}\n\n  ngOnChanges() {\n    if (this.component) {\n      this.component.instance.config = this.config;\n      this.component.instance.group = this.group;\n    }\n  }\n\n  ngOnInit() {\n    if (!components[this.config.type]) {\n      const supportedTypes = Object.keys(components).join(', ');\n      throw new Error(\n        `Trying to use an unsupported type (${this.config.type}).\n        Supported types: ${supportedTypes}`\n      );\n    }\n    const component = this.resolver.resolveComponentFactory<Field>(components[this.config.type]);\n    this.component = this.container.createComponent(component);\n    this.component.instance.config = this.config;\n    this.component.instance.group = this.group;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DynamicFormComponent } from './dynamic-form/dynamic-form.component';\nimport { UiComponentsModule } from 'MySubmoduleLib1';\nimport { DynamicFieldDirective } from './dynamic-field/dynamic-field.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    UiComponentsModule\n  ],\n  declarations: [DynamicFormComponent, DynamicFieldDirective],\n  exports: [DynamicFormComponent, DynamicFieldDirective]\n})\nexport class FormGeneratorModule { }\n"]}