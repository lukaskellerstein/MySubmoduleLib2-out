{"version":3,"sources":["ng://form-generator/lib/dynamic-form/dynamic-form.component.ts","ng://form-generator/lib/dynamic-field/widgets/object-link/object-link.component.ts","ng://form-generator/lib/dynamic-field/widgets/my-button/my-button.component.ts","ng://form-generator/lib/dynamic-field/widgets/my-input/my-input.component.ts","ng://form-generator/lib/dynamic-field/widgets/my-select/my-select.component.ts","ng://form-generator/lib/dynamic-field/dynamic-field.directive.ts","ng://form-generator/lib/dynamic-field/widgets/widgets.module.ts","ng://form-generator/lib/form-generator.module.ts"],"names":["DynamicFormComponent","fb","this","EventEmitter","Object","keys","defineProperty","prototype","_this","controls","config","forEach","key","value","hasOwnProperty","name","push","form","valueChanges","valid","ngOnInit","createGroup","ngOnChanges","configControls","map","item","filter","control","includes","removeControl","find","addControl","createControl","group","disabled","validation","handleSubmit","event","preventDefault","stopPropagation","submit","emit","setDisabled","disable","method","setValue","emitEvent","Component","args","selector","exportAs","template","styles","changeDetection","ChangeDetectionStrategy","OnPush","FormBuilder","Input","Output","ObjectLinkComponent","onLinkClick","ev","MyButtonComponent","MyInputComponent","MySelectComponent","components","button","input","select","object","DynamicFieldDirective","resolver","container","component","instance","type","supportedTypes","join","Error","resolveComponentFactory","createComponent","buildFieldConfig","label","Directive","ComponentFactoryResolver","ViewContainerRef","WidgetsModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports","entryComponents","FormGeneratorModule"],"mappings":"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","sourcesContent":["import { Component, OnInit, OnChanges, EventEmitter, Input, Output, ChangeDetectionStrategy } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\n\nimport { Observable } from 'rxjs';\nimport { FieldConfig } from '../dynamic-field/widgets/base/field.config';\n\n@Component({\n  selector: 'lib-dynamic-form',\n  exportAs: 'dynamicForm',\n  template: `<form class=\"dynamic-form\" [formGroup]=\"form\" (submit)=\"handleSubmit($event)\">\n  <ng-container *ngFor=\"let fieldKey of objectGetKeys(config);\">\n    key: {{ fieldKey }}\n    <ng-container dynamicField [config]=\"config[fieldKey]\" [name]=\"fieldKey\" [group]=\"form\">\n    </ng-container>\n  </ng-container>\n  <input *ngIf=\"true\" type=\"submit\" name=\"submit\" value=\"Submit\"> \n</form>My `,\n  styles: [``],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicFormComponent implements OnChanges, OnInit {\n  @Input()\n  config = {}\n\n  @Output()\n  submit: EventEmitter<any> = new EventEmitter<any>();\n\n  form: FormGroup;\n\n  get controls() {\n    const controls = []\n    Object.keys(this.config).forEach(key => {\n      const value = this.config[key];\n      if (!value.hasOwnProperty(\"name\")) {\n        value.name = key;\n      }\n      controls.push(value);\n    });\n    return controls;\n  }\n  get changes(): Observable<any> { return this.form.valueChanges; }\n  get valid() { return this.form.valid; }\n  get value(): any { return this.form.value; }\n\n  objectGetKeys = Object.keys;\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit() {\n    this.form = this.createGroup();\n  }\n\n  ngOnChanges() {\n    if (!this.form) {\n      this.form = this.createGroup();\n    }\n\n    const controls = Object.keys(this.form.controls);\n    const configControls = this.controls.map((item) => item.name);\n\n    controls\n      .filter((control) => !configControls.includes(control))\n      .forEach((control) => this.form.removeControl(control));\n\n    configControls\n      .filter((control) => !controls.includes(control))\n      .forEach((name) => {\n        const config = this.controls.find((control) => control.name === name);\n        this.form.addControl(name, this.createControl(config));\n      });\n\n\n  }\n\n  createGroup() {\n    const group = this.fb.group({});\n    this.controls.forEach(control => group.addControl(control.name, this.createControl(control)));\n    return group;\n  }\n\n  createControl(config: FieldConfig): FormControl {\n    const { disabled, validation, value } = config;\n    return this.fb.control({ disabled, value }, validation);\n  }\n\n  handleSubmit(event: Event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.submit.emit(this.value);\n  }\n\n  setDisabled(name: string, disable: boolean) {\n    if (this.form.controls[name]) {\n      const method = disable ? 'disable' : 'enable';\n      this.form.controls[name][method]();\n      return;\n    }\n\n    this.config = this.controls.map((item) => {\n      if (item.name === name) {\n        item.disabled = disable;\n      }\n      return item;\n    });\n  }\n\n  setValue(name: string, value: any) {\n    this.form.controls[name].setValue(value, { emitEvent: true });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FieldConfig } from '../base/field.config';\nimport { FormGroup } from '@angular/forms';\nimport { Field } from '../base/field';\n\n@Component({\n  selector: 'lib-object-link',\n  template: `<a href=\"#\" (click)=\"onLinkClick($event)\">{{ config | json }}</a>`\n})\nexport class ObjectLinkComponent implements Field  {\n\n  config: FieldConfig;\n  group: FormGroup;\n\n  onLinkClick(ev){\n    // TODO: trigger event to add new form to forms container \n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Field } from '../base/field';\nimport { FieldConfig } from '../base/field.config';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'lib-my-button',\n  template: `<div class=\"dynamic-field form-button\" [formGroup]=\"group\">\n  <button [disabled]=\"config.disabled\" type=\"submit\">\n    {{ config.label }}\n  </button>\n</div>`,\n  styles: [``]\n})\nexport class MyButtonComponent implements Field {\n  config: FieldConfig;\n  group: FormGroup;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FieldConfig } from '../base/field.config';\nimport { FormGroup } from '@angular/forms';\nimport { Field } from '../base/field';\n\n@Component({\n  selector: 'lib-my-input',\n  template: `<div class=\"dynamic-field form-input\" [formGroup]=\"group\">\n  <label>{{ config.label }}</label>\n  <input type=\"text\" [attr.placeholder]=\"config.placeholder\" [formControlName]=\"config.name\">\n</div>`,\n  styles: [``]\n})\nexport class MyInputComponent implements Field  {\n\n  config: FieldConfig;\n  group: FormGroup;\n\n  \n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Field } from '../base/field';\nimport { FieldConfig } from '../base/field.config';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'lib-my-select',\n  template: `<div class=\"dynamic-field form-select\" [formGroup]=\"group\">\n  <label>{{ config.label }}</label>\n  <select [formControlName]=\"config.name\">\n    <option value=\"\">{{ config.placeholder }}</option>\n    <option *ngFor=\"let option of config.options\">\n      {{ option }}\n    </option>\n  </select>\n</div>`,\n  styles: [``]\n})\nexport class MySelectComponent implements Field {\n\n  config: FieldConfig;\n  group: FormGroup;\n\n}\n","import { ComponentFactoryResolver, ComponentRef, Directive, Input, OnChanges, OnInit, Type, ViewContainerRef } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { ObjectLinkComponent } from './widgets/object-link/object-link.component';\nimport { Field } from './widgets/base/field';\nimport { MyButtonComponent } from './widgets/my-button/my-button.component';\nimport { MyInputComponent } from './widgets/my-input/my-input.component';\nimport { MySelectComponent } from './widgets/my-select/my-select.component';\nimport { FieldConfig } from './widgets/base/field.config';\n\nconst components: { [type: string]: Type<Field> } = {\n  button: MyButtonComponent,\n  input: MyInputComponent,\n  select: MySelectComponent,\n  object: ObjectLinkComponent\n};\n\n@Directive({\n  selector: '[dynamicField]'\n})\nexport class DynamicFieldDirective implements Field, OnChanges, OnInit {\n  @Input()\n  config: FieldConfig;\n\n  @Input()\n  name: string;\n\n  @Input()\n  group: FormGroup;\n\n  component: ComponentRef<Field>;\n\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private container: ViewContainerRef\n  ) { }\n\n  ngOnChanges() {\n    if (this.component) {\n      this.component.instance.config = this.config;\n      this.component.instance.group = this.group;\n    }\n  }\n\n  ngOnInit() {\n    if (!components[this.config.type]) {\n      const supportedTypes = Object.keys(components).join(', ');\n      throw new Error(\n        `Trying to use an unsupported type (${this.config.type}).\n        Supported types: ${supportedTypes}`\n      );\n    }\n    const component = this.resolver.resolveComponentFactory<Field>(components[this.config.type]);\n    this.component = this.container.createComponent(component);\n    this.component.instance.config = this.buildFieldConfig(this.config)\n    this.component.instance.group = this.group;\n  }\n\n  buildFieldConfig(config) {\n    if (!config.name) {\n      config.name = this.name;\n\n      if (!config.label) {\n        config.label = this.name;\n      }\n      // TODO further field config prerender changes\n      return config;\n\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MyInputComponent } from './my-input/my-input.component';\nimport { MyButtonComponent } from './my-button/my-button.component';\nimport { MySelectComponent } from './my-select/my-select.component';\nimport { ObjectLinkComponent } from './object-link/object-link.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [MyInputComponent, MyButtonComponent, MySelectComponent, ObjectLinkComponent],\n  exports: [MyInputComponent, MyButtonComponent, MySelectComponent, ObjectLinkComponent],\n  entryComponents: [MyButtonComponent, MyInputComponent, MySelectComponent, ObjectLinkComponent]\n})\nexport class WidgetsModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DynamicFormComponent } from './dynamic-form/dynamic-form.component';\nimport { DynamicFieldDirective } from './dynamic-field/dynamic-field.directive';\nimport { WidgetsModule } from './dynamic-field/widgets/widgets.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    WidgetsModule\n  ],\n  declarations: [DynamicFormComponent, DynamicFieldDirective],\n  exports: [DynamicFormComponent, DynamicFieldDirective]\n})\nexport class FormGeneratorModule { }\n"]}